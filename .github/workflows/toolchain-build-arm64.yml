name: ARM64 GCC+LLD Build

on:
  workflow_dispatch:
  pull_request:
  push:
  schedule:
    - cron: '0 0 * * 0,4'

jobs:
  build:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: Setup
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update
        sudo apt-get install -y axel flex bison ncurses-dev texinfo gcc gperf patch libtool automake g++ libncurses5-dev gawk subversion expat libexpat1-dev python-all-dev binutils-dev bc libcap-dev autoconf libgmp-dev build-essential pkg-config libmpc-dev libmpfr-dev autopoint gettext txt2man liblzma-dev libssl-dev libz-dev mercurial wget tar gcc-10 g++-10 cmake ninja-build zstd lz4 liblz4-tool liblz4-dev lzma --fix-broken --fix-missing
    - name: Set build date
      id: get-date
      run: |
        sudo timedatectl set-timezone Asia/Jakarta
        echo ::set-output name=date::$(/bin/date -u "+%Y%m%d")
    - name: Configuration gcc
      run: |
        alias gcc=gcc-10
        alias g++=g++-10
        git config --global user.name "${GITHUB_USER}"
        git config --global user.email "${GITHUB_EMAIL}"
        git clone https://"${GITHUB_USER}":"${GITHUB_TOKEN}"@github.com/NFS-projects/gcc-arm64 ../gcc-arm64 -b 11.x
        rm -rf ../gcc-arm64/*
      env:
        GITHUB_EMAIL: ${{ secrets.EMAIL }}
        GITHUB_TOKEN: ${{ secrets.API_TOKEN_GITHUB }}
        GITHUB_USER: ${{ secrets.USERNAME }}
        BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        CHAT_ID: ${{ secrets.CHAT }}
        BINUTILS_BRANCH: ${{ secrets.BINUTILS_BRANCH }}
        GCC_BRANCH: ${{ secrets.GCC_BRANCH }}
        GCC_NAME: ${{ secrets.GCC }}
        LLVM_BRANCH: ${{ secrets.LLVM_BRANCH }}
    - name: Building GCC & Binutils
      run: |
        chmod a+x build-*.sh
        curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" -d chat_id="${CHAT_ID}" -d "disable_web_page_preview=true" -d "parse_mode=html" -d text="<b>Starting Build $GCC_NAME GCC ARM64 (64-bit)</b>"
        ./build-gcc.sh -a arm64
      env:
        GITHUB_EMAIL: ${{ secrets.EMAIL }}
        GITHUB_TOKEN: ${{ secrets.API_TOKEN_GITHUB }}
        GITHUB_USER: ${{ secrets.USERNAME }}
        BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        CHAT_ID: ${{ secrets.CHAT }}
        BINUTILS_BRANCH: ${{ secrets.BINUTILS_BRANCH }}
        GCC_BRANCH: ${{ secrets.GCC_BRANCH }}
        GCC_NAME: ${{ secrets.GCC }}
        LLVM_BRANCH: ${{ secrets.LLVM_BRANCH }}
    - name: Building llvm
      run: |
        sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
        ./build-lld.sh -a arm64
      env:
        GITHUB_EMAIL: ${{ secrets.EMAIL }}
        GITHUB_TOKEN: ${{ secrets.API_TOKEN_GITHUB }}
        GITHUB_USER: ${{ secrets.USERNAME }}
        BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        CHAT_ID: ${{ secrets.CHAT }}
        BINUTILS_BRANCH: ${{ secrets.BINUTILS_BRANCH }}
        GCC_BRANCH: ${{ secrets.GCC_BRANCH }}
        GCC_NAME: ${{ secrets.GCC }}
        LLVM_BRANCH: ${{ secrets.LLVM_BRANCH }}
    - name: Push
      run: |
        script_dir=$(pwd)
        cd ../gcc-arm64
        ./bin/aarch64-elf-gcc -v 2>&1 | tee /tmp/gcc-version
        ./bin/aarch64-elf-ld.lld -v 2>&1 | tee /tmp/lld-arm64-version
        bash "$script_dir/strip-binaries.sh"
        echo "# $GCC_NAME GCC ARM64" >> README.md
        git add . -f
        git commit -as -m "Release $GCC_NAME GCC ARM64 $(/bin/date)" -m "Build completed on: $(/bin/date)" -m "Configuration: $(/bin/cat /tmp/gcc-version)" -m "LLD: $(/bin/cat /tmp/lld-arm64-version)"
        git gc
        git push origin 11.x -f
      env:
        GITHUB_EMAIL: ${{ secrets.EMAIL }}
        GITHUB_TOKEN: ${{ secrets.API_TOKEN_GITHUB }}
        GITHUB_USER: ${{ secrets.USERNAME }}
        BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        CHAT_ID: ${{ secrets.CHAT }}
        BINUTILS_BRANCH: ${{ secrets.BINUTILS_BRANCH }}
        GCC_BRANCH: ${{ secrets.GCC_BRANCH }}
        GCC_NAME: ${{ secrets.GCC }}
        LLVM_BRANCH: ${{ secrets.LLVM_BRANCH }}
    - uses: yanzay/notify-telegram@v0.1.0
      if: always()
      with:
        chat: ${{ secrets.CHAT }} # user id or channel name secret
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }} # token secret
        status: ${{ job.status }} # do not modify this line
